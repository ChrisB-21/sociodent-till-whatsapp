import { ConsultationType, PaymentData, PaymentResult } from '../types/payment';
import { createRazorpayOrder, loadRazorpayScript, initializeRazorpayPayment } from '../lib/razorpay';

const RAZORPAY_KEY = import.meta.env.VITE_RAZORPAY_KEY_ID;

export interface PaymentMethod {
    id: 'razorpay' | 'cash';
    name: string;
    available: boolean;
}

class PaymentService {
    private static instance: PaymentService | null = null;

    private constructor() {
        // Private constructor to enforce singleton
    }

    public static getInstance(): PaymentService {
        if (!PaymentService.instance) {
            PaymentService.instance = new PaymentService();
        }
        return PaymentService.instance;
    }

    public async initializePaymentSDK(): Promise<boolean> {
        try {
            return await loadRazorpayScript();
        } catch (error) {
            console.error('Failed to initialize payment SDK:', error);
            return false;
        }
    }

    public async processRazorpayPayment(paymentData: PaymentData): Promise<PaymentResult> {
        try {
            // Check if Razorpay SDK is loaded
            if (typeof (window as any).Razorpay === 'undefined') {
                const loaded = await this.initializePaymentSDK();
                if (!loaded) {
                    throw new Error("Razorpay SDK failed to load");
                }
            }

            // Validate API key
            if (!RAZORPAY_KEY) {
                throw new Error("Razorpay API key is missing");
            }

            // Create order
            const order = await createRazorpayOrder(
                paymentData.amount, 
                'consultation', 
                paymentData.consultationType
            );

            if (!order?.id) {
                throw new Error("Failed to create order: Invalid response");
            }

            // Initialize payment
            const paymentResponse = await initializeRazorpayPayment({
                key: RAZORPAY_KEY,
                amount: order.amount,
                currency: order.currency || "INR",
                name: "Socio Smile Market",
                description: this.getConsultationTitle(paymentData.consultationType),
                order_id: order.id,
                prefill: {
                    name: paymentData.customerInfo.name,
                    email: paymentData.customerInfo.email,
                    contact: paymentData.customerInfo.phone,
                },
                notes: {
                    consultationType: paymentData.consultationType,
                    date: paymentData.appointmentDetails.date,
                    time: paymentData.appointmentDetails.time,
                    ...(paymentData.consultationType !== 'virtual' && paymentData.appointmentDetails.address 
                        ? { address: paymentData.appointmentDetails.address } 
                        : {}),
                },
                theme: {
                    color: "#0F766E",
                },
            });

            return {
                success: true,
                paymentId: paymentResponse.razorpay_payment_id,
                orderId: paymentResponse.razorpay_order_id,
            };
        } catch (error: any) {
            console.error("Payment failed:", error);
            return {
                success: false,
                error: error.message || "Payment processing failed",
            };
        }
    }

    public isPaymentMethodAvailable(paymentMethod: 'razorpay' | 'cash', consultationType: ConsultationType): boolean {
        return !(paymentMethod === 'cash' && consultationType === 'virtual');
    }

    private getConsultationTitle(consultationType: ConsultationType): string {
        const titles: Record<ConsultationType, string> = {
            virtual: 'Virtual Consultation',
            home: 'Home Visit Consultation',
            clinic: 'Clinic Consultation',
        };
        return titles[consultationType];
    }

    public getAvailablePaymentMethods(consultationType: ConsultationType): PaymentMethod[] {
        const allMethods: PaymentMethod[] = [
            {
                id: 'razorpay',
                name: 'Card/UPI/Netbanking',
                available: true,
            },
            {
                id: 'cash',
                name: 'Cash on Visit',
                available: consultationType !== 'virtual',
            },
        ];

        return allMethods.filter(method => method.available);
    }
}

// Create and export the singleton instance
const paymentService = PaymentService.getInstance();

export { paymentService };
export default paymentService;

class PaymentService {
    private static instance: PaymentService;

    private constructor() {
        // Private constructor to enforce singleton
        if (PaymentService.instance) {
            return PaymentService.instance;

        }

class PaymentService {        PaymentService.instance = this;

    private static instance: PaymentService;    }

    

    private constructor() {    public static getInstance(): PaymentService {

        // Private constructor to enforce singleton        if (!PaymentService.instance) {

        if (PaymentService.instance) {            PaymentService.instance = new PaymentService();

            return PaymentService.instance;        }

        }        return PaymentService.instance;

        PaymentService.instance = this;    }

    }

    public async initializePaymentSDK(): Promise<boolean> {

    public static getInstance(): PaymentService {        try {

        if (!PaymentService.instance) {            return await loadRazorpayScript();

            PaymentService.instance = new PaymentService();        } catch (error) {

        }            console.error('Failed to initialize payment SDK:', error);

        return PaymentService.instance;            return false;

    }        }

    }

    public async initializePaymentSDK(): Promise<boolean> {

        try {    public async processRazorpayPayment(paymentData: PaymentData): Promise<PaymentResult> {

            return await loadRazorpayScript();        try {

        } catch (error) {            if (typeof (window as any).Razorpay === 'undefined') {

            console.error('Failed to initialize payment SDK:', error);                const loaded = await loadRazorpayScript();

            return false;                if (!loaded) {

        }                    throw new Error("Razorpay SDK failed to load");

    }                }

            }

    public async processRazorpayPayment(paymentData: PaymentData): Promise<PaymentResult> {

        try {            if (!RAZORPAY_KEY) {

            if (typeof (window as any).Razorpay === 'undefined') {                throw new Error("Razorpay API key is missing");

                const loaded = await loadRazorpayScript();            }

                if (!loaded) {

                    throw new Error("Razorpay SDK failed to load");            const order = await createRazorpayOrder(paymentData.amount, 'consultation', paymentData.consultationType);

                }            

            }            if (!order?.id) {

                throw new Error("Failed to create order: Invalid response");

            if (!RAZORPAY_KEY) {            }

                throw new Error("Razorpay API key is missing");

            }            const paymentResponse = await initializeRazorpayPayment({

                key: RAZORPAY_KEY,

            const order = await createRazorpayOrder(paymentData.amount, 'consultation', paymentData.consultationType);                amount: order.amount,

                            currency: order.currency || "INR",

            if (!order?.id) {                name: "Socio Smile Market",

                throw new Error("Failed to create order: Invalid response");                description: this.getConsultationTitle(paymentData.consultationType),

            }                order_id: order.id,

                prefill: {

            const paymentResponse = await initializeRazorpayPayment({                    name: paymentData.customerInfo.name,

                key: RAZORPAY_KEY,                    email: paymentData.customerInfo.email,

                amount: order.amount,                    contact: paymentData.customerInfo.phone,

                currency: order.currency || "INR",                },

                name: "Socio Smile Market",                notes: {

                description: this.getConsultationTitle(paymentData.consultationType),                    consultationType: paymentData.consultationType,

                order_id: order.id,                    date: paymentData.appointmentDetails.date,

                prefill: {                    time: paymentData.appointmentDetails.time,

                    name: paymentData.customerInfo.name,                    ...(paymentData.consultationType !== 'virtual' && paymentData.appointmentDetails.address 

                    email: paymentData.customerInfo.email,                        ? { address: paymentData.appointmentDetails.address } 

                    contact: paymentData.customerInfo.phone,                        : {}),

                },                },

                notes: {                theme: {

                    consultationType: paymentData.consultationType,                    color: "#0F766E",

                    date: paymentData.appointmentDetails.date,                },

                    time: paymentData.appointmentDetails.time,            });

                    ...(paymentData.consultationType !== 'virtual' && paymentData.appointmentDetails.address 

                        ? { address: paymentData.appointmentDetails.address }             return {

                        : {}),                success: true,

                },                paymentId: paymentResponse.razorpay_payment_id,

                theme: {                orderId: paymentResponse.razorpay_order_id,

                    color: "#0F766E",            };

                },

            });        } catch (error: any) {

            console.error("Payment failed:", error);

            return {            return {

                success: true,                success: false,

                paymentId: paymentResponse.razorpay_payment_id,                error: error.message || "Payment processing failed",

                orderId: paymentResponse.razorpay_order_id,            };

            };        }

    }

        } catch (error: any) {

            console.error("Payment failed:", error);    public isPaymentMethodAvailable(paymentMethod: 'razorpay' | 'cash', consultationType: ConsultationType): boolean {

            return {        return !(paymentMethod === 'cash' && consultationType === 'virtual');

                success: false,    }

                error: error.message || "Payment processing failed",

            };    private getConsultationTitle(consultationType: ConsultationType): string {

        }        const titles: Record<ConsultationType, string> = {

    }            virtual: 'Virtual Consultation',

            home: 'Home Visit Consultation',

    public isPaymentMethodAvailable(paymentMethod: 'razorpay' | 'cash', consultationType: ConsultationType): boolean {            clinic: 'Clinic Consultation',

        return !(paymentMethod === 'cash' && consultationType === 'virtual');        };

    }        return titles[consultationType];

    }

    private getConsultationTitle(consultationType: ConsultationType): string {

        const titles: Record<ConsultationType, string> = {    public getAvailablePaymentMethods(consultationType: ConsultationType) {

            virtual: 'Virtual Consultation',        const allMethods = [

            home: 'Home Visit Consultation',            {

            clinic: 'Clinic Consultation',                id: 'razorpay',

        };                name: 'Card/UPI/Netbanking',

        return titles[consultationType];                available: true,

    }            },

            {

    public getAvailablePaymentMethods(consultationType: ConsultationType) {                id: 'cash',

        const allMethods = [                name: 'Cash on Visit',

            {                available: consultationType !== 'virtual',

                id: 'razorpay',            },

                name: 'Card/UPI/Netbanking',        ];

                available: true,

            },        return allMethods.filter(method => method.available);

            {    }

                id: 'cash',}

                name: 'Cash on Visit',

                available: consultationType !== 'virtual',// Create and export the singleton instance

            },const paymentService = PaymentService.getInstance();

        ];

// Export as both named and default export

        return allMethods.filter(method => method.available);export { paymentService };

    }export default paymentService;

}

// Create and export the singleton instance
const paymentService = PaymentService.getInstance();

// Export as both named and default export
export { paymentService };
export default paymentService;